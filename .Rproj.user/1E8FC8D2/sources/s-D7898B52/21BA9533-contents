setwd("C:/DFCI/Jeremy/flex/flex/")

unlink("example/*", recursive = T)

flex:::removeTree()

library(tictoc)

new = T

FixedPop("LT", 10000, 0.0)
FixedPop("ST", 750, 0.0)
DiffTriangle("rest",height = 5, first_level = 100, label = 0.0)
#FixedPop("rest", 1000, 1.0)

addEdge("LT", "LT", "alpha", 0.05)
addEdge("LT", "ST", "gamma1", 0.05)
addEdge("ST", "LT", "dediff", 0.01)
addEdge("LT", "ST", "gamma2", 0.05)
addEdge("ST", "rest", "gamma1", 0.1)
addEdge("LT", "LT", "mutation", 0.1)


setRoot("LT")
setFitnessDistribution(distribution = "normal", is_random = T, alpha_fitness = 1, beta_fitness = 1, pass_prob = 0, upper_fitness = 10, lower_fitness = 0)

writeTree(outdir = "/example/")

par(mfrow=c(1,1))
plotTree(allEdge = T)

tic()
if(new){
simulateFixedTreeCodeNew(nObs =100,indir = paste(getwd(), "/example/", sep = ""),
                      outdir = paste(getwd(), "/example/", sep = ""), traverseFrequency = 1)
} else {
  simulateFixedTreeCode(nObs =10000,indir = paste(getwd(), "/example/", sep = ""),
                           outdir = paste(getwd(), "/example/", sep = ""))
}
toc()

inDir = paste(getwd(), "/example/", sep = "")
setwd(inDir)
popfiles = list.files(inDir, pattern="^out.*.pop$", full.names=F)
lblfiles = list.files(inDir, pattern="^out.*.label$", full.names=F)
sdifiles = list.files(inDir, pattern="^out.*.sdi$", full.names=F)

a = read.table(popfiles[length(popfiles)], header = T)
b = read.table(lblfiles[length(lblfiles)], header = T)
d = read.table(sdifiles[length(sdifiles)], header = T)



for(i in 2:ncol(a)){
  par(mfrow=c(2,2))
  plot(a[,1], a[,i], main = colnames(a)[i], ylab = "Population size", xlab = "time")
  plot(b[,1], b[,i], main = colnames(b)[i],ylim = c(0,1), xlab = "time",
       ylab = "Fraction Labelled", col = "red")
  #mutfiles = list.files(inDir, pattern=paste("^out.*", colnames(a)[i], ".mut$", sep = ""), full.names = F)
  #c = read.table(mutfiles[length(mutfiles)], header = F, fill = TRUE, col.names = paste0("V", seq_len(max(count.fields(mutfiles[length(mutfiles)])))))
  #c[is.na(c)] = 0
  #matplot(c[,2:ncol(c)], main = colnames(a)[i])
  plot(d[,1], d[,i], main = colnames(a)[i], ylab = "SDI", xlab = "time")
}

infofiles = list.files(inDir, pattern="^out.*.info$", full.names=F)
info = read.table(infofiles[length(infofiles)], header = T)


evtfiles = list.files(inDir, pattern = "^out.*.events$", full.names = F)
evt = read.table(evtfiles[length(evtfiles)], header = T)

if(new){

  evt2 = evt
  for(row in 2:nrow(evt)){
    for(i in 2:length(names(a))){
      popsize = a[row-1,i]
      cp = names(a)[i]
      #print(grepl( cp , names(evt) ))
      evt2[row,grepl( cp , names(evt) )] = evt2[row,grepl( cp , names(evt) )] / popsize
    }
  }
  print(apply(evt2[2:nrow(evt2),], 2, mean) )

} else {

  options(scipen = 999)
  print(apply(evt, 2, mean) )
}

