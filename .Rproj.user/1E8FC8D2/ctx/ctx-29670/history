CellPopulation("CLP", 13*nLT, 0.0)
CellPopulation("CMP", 39*nLT, 0.0)
CellPopulation("GMP", as.integer(0.24*39*nLT), 0.0)
CellPopulation("MEP", as.integer(0.39*39*nLT), 0.0)
CellPopulation("proB", as.integer(108*13*nLT), 0.0)
addEdge("LT", "LT", "alpha", 0.009)
addEdge("ST", "ST", "alpha", 0.042)
addEdge("MPP", "MPP", "alpha", 4)
addEdge("CLP", "CLP", "alpha", 3.00)
addEdge("CMP", "CMP", "alpha", 4)
addEdge("LT", "ST", "gamma1", 0.009)
addEdge("ST", "MPP", "gamma1", 0.045)
addEdge("MPP", "CLP", "gamma1", 0.022)
addEdge("MPP", "CMP", "gamma1", 3.992)
addEdge("CLP", "proB", "gamma1", 2.000)
addEdge("CMP", "GMP", "gamma1", 2)
addEdge("CMP", "MEP", "gamma1", 3)
addEdge("CLP", "CLP", "delta", 1.015)
addEdge("GMP", "GMP", "delta", 2*39/(0.24*39))
addEdge("MEP", "MEP", "delta", 3*39/(0.39*39))
addEdge("proB", "proB", "delta", 2*13/(108*13))
addEdge("LT", "LT", "mutation", mu)
addEdge("ST", "ST", "mutation", mu)
addEdge("MPP", "MPP", "mutation", mu)
addEdge("CLP", "CLP", "mutation", mu)
addEdge("CMP", "CMP", "mutation", mu)
addEdge("MEP", "MEP", "mutation", mu)
addEdge("GMP", "GMP", "mutation", mu)
addEdge("proB", "proB", "mutation", mu)
setRoot("LT")
tree_dir = paste("/tree_", i_, "_", j_, "/",sep = "")
writeTree(outdir = tree_dir)
treedirs = c(treedirs, tree_dir)
#par(mfrow=c(1,1))
#plotTree(allEdge = T)
flex:::removeTree()
}
}
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
foreach(y_=1:length(treedirs), .packages = c("tictoc", "flex")) %dopar% {
##library(tictoc)
#library(flex)
tic()
simulateTreeCodeNew(nObs =100, traverseFrequency = 1, indir = paste(getwd(), "/tree_1_1/", sep = ""),
outdir = paste(getwd(), "/output/", sep = ""))
toc()
}
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
foreach(y_=1:length(treedirs), .packages = c("tictoc", "flex")) %dopar% {
##library(tictoc)
#library(flex)
tic()
simulateTreeCodeNew(nObs =100, traverseFrequency = 1, indir = paste(getwd(), "/tree_1_1/", sep = ""),
outdir = paste(getwd(), "/output/", sep = ""))
toc()
}
stopCluster(cl)
library(flex)
library(flex)
library(flex)
setwd("C:/example4/")
wdir = getwd()
output_dir = paste(wdir, "/output/", sep = "")
dir.create(wdir, showWarnings = FALSE)
dir.create(output_dir, showWarnings = FALSE)
library(foreach)
library(doParallel)
new = T
cores=detectCores()
ntrials = 1
mus = c(1e-7, 1e-8, 1e-9)
print(paste("I'm working with", cores-1, "cores"))
y = 0
treedirs = c()
for(j_ in seq(length(mus))){
for(i_ in 1:ntrials) {
library(tictoc)
library(flex)
setwd(wdir)
#unlink("example/*", recursive = T)
print(paste(i_, j_))
mu = mus[j_]
flex:::removeTree()
nLT = 17000
CellPopulation("LT", nLT, 0.0)
CellPopulation("ST", 2.9*nLT, 0.0)
CellPopulation("MPP", 9*nLT, 0.0)
CellPopulation("CLP", 13*nLT, 0.0)
CellPopulation("CMP", 39*nLT, 0.0)
CellPopulation("GMP", as.integer(0.24*39*nLT), 0.0)
CellPopulation("MEP", as.integer(0.39*39*nLT), 0.0)
CellPopulation("proB", as.integer(108*13*nLT), 0.0)
addEdge("LT", "LT", "alpha", 0.009)
addEdge("ST", "ST", "alpha", 0.042)
addEdge("MPP", "MPP", "alpha", 4)
addEdge("CLP", "CLP", "alpha", 3.00)
addEdge("CMP", "CMP", "alpha", 4)
addEdge("LT", "ST", "gamma1", 0.009)
addEdge("ST", "MPP", "gamma1", 0.045)
addEdge("MPP", "CLP", "gamma1", 0.022)
addEdge("MPP", "CMP", "gamma1", 3.992)
addEdge("CLP", "proB", "gamma1", 2.000)
addEdge("CMP", "GMP", "gamma1", 2)
addEdge("CMP", "MEP", "gamma1", 3)
addEdge("CLP", "CLP", "delta", 1.015)
addEdge("GMP", "GMP", "delta", 2*39/(0.24*39))
addEdge("MEP", "MEP", "delta", 3*39/(0.39*39))
addEdge("proB", "proB", "delta", 2*13/(108*13))
addEdge("LT", "LT", "mutation", mu)
addEdge("ST", "ST", "mutation", mu)
addEdge("MPP", "MPP", "mutation", mu)
addEdge("CLP", "CLP", "mutation", mu)
addEdge("CMP", "CMP", "mutation", mu)
addEdge("MEP", "MEP", "mutation", mu)
addEdge("GMP", "GMP", "mutation", mu)
addEdge("proB", "proB", "mutation", mu)
setRoot("LT")
tree_dir = paste("/tree_", i_, "_", j_, "/",sep = "")
writeTree(outdir = tree_dir)
treedirs = c(treedirs, tree_dir)
#par(mfrow=c(1,1))
#plotTree(allEdge = T)
flex:::removeTree()
}
}
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
foreach(y_=1:length(treedirs), .packages = c("tictoc", "flex")) %dopar% {
##library(tictoc)
#library(flex)
tic()
simulateTreeCodeNew(nObs =100, traverseFrequency = 1, indir = paste(getwd(), treedirs[y_], sep = ""),
outdir = paste(getwd(), "/output/", sep = ""))
toc()
}
floor(3/2)
floor(63/3)
library(kntir)
install.packages("knitr")
install.packages("knitr")
install.packages("kableExtra")
library(flex)
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
library(flex)
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
library(flex)
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
library(flex)
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
setwd("C:/example4/")
source('C:/DFCI/Jeremy/Odyssey/simulations/fixed/HSC_parallel_alpha_fixed.R')
stopCluster()
stopCluster(cl)
setwd("C:/example4/")
source('C:/DFCI/Jeremy/Odyssey/simulations/fixed/HSC_parallel_alpha_fixed.R')
source('C:/DFCI/Jeremy/Odyssey/simulations/fixed/HSC_parallel_alpha_fixed.R')
getwd()
source('C:/DFCI/Jeremy/Odyssey/simulations/fixed/HSC_parallel_gamma_fixed.R')
source('C:/DFCI/Jeremy/Odyssey/simulations/fixed/HSC_parallel_gamma_fixed.R')
library(flex)
library(flex)
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
params = read.delim("out_23-04-2018-143012_99975.params")
View(params)
params = read.delim("out_23-04-2018-143012_99975.params", header = F)
View(t(params))
library(flex)
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
library(flex)
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
library(flex)
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
library(flex)
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
library(flex)
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
library(flex)
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
library(flex)
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
library(flex)
library(flex)
library(flex)
setwd("C:/example4/")
source('C:/DFCI/Jeremy/Odyssey/simulations/fixed/HSC_parallel_delta_fixed.R')
stopCluster(cl)
stopCluster(cl)
library(flex)
library(flex)
library(flex)
setwd("C:/example4/")
source('C:/DFCI/Jeremy/Odyssey/simulations/fixed/HSC_parallel_delta_fixed.R')
stopCluster(cl)
getwd()
setwd("C:/example4")
params = read.table("out_01-05-2018-142137_95916.params2.gz")
View(params)
params = t(params)
View(params)
source('~/.active-rstudio-document')
View(params)
params = read.table("out_01-05-2018-142137_95916.params2.gz")
params = t(params)
names(params) = params[1,]
View(params)
params = read.table("out_01-05-2018-142137_95916.params2.gz")
params = as.data.frame(t(params))
names(params) = params[1,]
View(params)
params[1,]
list(params[1,])
params = read.table("out_01-05-2018-142137_95916.params2.gz")
params = read.table("out_01-05-2018-142137_95916.params2.gz", row.names = F, col.names = F)
params = read.table("out_01-05-2018-142137_95916.params2.gz")
params = read.table("out_01-05-2018-142137_95916.params2.gz", header = F)
View(params)
params = read.table("out_01-05-2018-142137_95916.params2.gz", header = F)
params = as.data.frame(t(params))
params = read.table("out_01-05-2018-142137_95916.params2.gz", header = F)
params = as.data.frame(t(params))
colnames(params) = params[1,]
View(params)
colnames(params) = as.list(params[1,])
as.list(params[1,])
params = read.transpose("out_01-05-2018-142137_95916.params2.gz")
install.packages("Ecfun")
library(Ecfun)
params = read.transpose("out_01-05-2018-142137_95916.params2.gz")
source('~/.active-rstudio-document')
params = read.tcsv("out_01-05-2018-142137_95916.params2.gz")
read.tcsv = function(file, header=TRUE, sep=",", ...) {
n = max(count.fields(file, sep=sep), na.rm=TRUE)
x = readLines(file)
.splitvar = function(x, sep, n) {
var = unlist(strsplit(x, split=sep))
length(var) = n
return(var)
}
x = do.call(cbind, lapply(x, .splitvar, sep=sep, n=n))
x = apply(x, 1, paste, collapse=sep)
out = read.csv(text=x, sep=sep, header=header, ...)
return(out)
}
params = read.tcsv("out_01-05-2018-142137_95916.params2.gz")
View(params)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
data.frame(t(params[,-1]))
params = read.table("out_01-05-2018-142137_95916.params2.gz")
params
View(params)
t(params[,-1])
data.frame(t(params[,-1]))
View(data.frame(t(params[,-1])))
params = read.table("out_01-05-2018-142137_95916.params2.gz")
params = t(params)
View(params)
source('~/.active-rstudio-document')
ncol(params)
params[1,i]
params = read.table("out_01-05-2018-142137_95916.params2.gz", header = F)
params = t(params)
for(i in seq(ncol(params))){
colnames(params)[i] = params[1,i]
}
params[1,i]
for(i in 1:ncol(params)){
colnames(params)[i] = params[1,i]
}
colnames(params)
source('~/.active-rstudio-document')
View(params)
for(i in 1:ncol(params)){
colnames(params)[i] = params[1,i]
}
params = read.table("out_01-05-2018-142137_95916.params2.gz", header = F)
params = t(params)
n = params[1,]
params = data.frame(params)
colnames(params) = n
View(params)
params = params[-1,]
View(params)
names(params)
getwd9)
getwd()
tempfile()
tempfile(tmpdir = getwd())
library(roxygen2)
roxygenise()
library(flex)
library(flex)
library(flex)
library(flex)
library(flex)
library(flex)
library(flex)
getwd()
setwd("C:/example4/")
ls
dir
dir.create("/output/tree1")
dir.create(paste(getwd(), "/output/tree1", sep = ""))
dir.create(paste(getwd(), "/output/tree1/", sep = ""))
dir.create(paste(getwd(), "/output/tree1/", sep = ""), showWarnings = F)
dir.create(paste(getwd(), "/output/", sep = ""), showWarnings = F)
dir.create(paste(getwd(), "/output/tree1/", sep = ""), showWarnings = F, recursive = T)
dir.create(paste("/output2/tree2/", sep = ""), showWarnings = F, recursive = T)
ls
getwd()
dir.create(file.path(paste("/output2/tree2/", sep = "")), showWarnings = F, recursive = T)
dir.create(file.path(paste("/output2/tree2/", sep = "")), showWarnings = F, recursive = T)
source('C:/DFCI/Jeremy/flex/R files/test_cellpop2.R')
source('C:/DFCI/Jeremy/flex/R files/test_cellpop1.R')
Population sizes are constant for FixedPops and DiffTrianglesPopulation sizes are constant for FixedPops and DiffTrianglesPopulation sizes are constant for FixedPops and DiffTriangles
source('C:/DFCI/Jeremy/flex/R files/test_cellpop1.R')
library(flex)
source('C:/DFCI/Jeremy/flex/R files/test_cellpop1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1Code.R')
source('C:/DFCI/Jeremy/flex/R files/example2.R')
source('C:/DFCI/Jeremy/flex/R files/example3.R')
source('C:/DFCI/Jeremy/flex/R files/example3.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
library(flex)
source('C:/DFCI/Jeremy/flex/R files/test_cellpop1.R')
source('C:/DFCI/Jeremy/flex/R files/test_cellpop1.R')
source('C:/DFCI/Jeremy/flex/R files/test_cellpop1.R')
source('C:/DFCI/Jeremy/flex/R files/test_cellpop1.R')
source('C:/DFCI/Jeremy/flex/R files/test_cellpop1.R')
source('C:/DFCI/Jeremy/flex/R files/test_cellpop1.R')
source('C:/DFCI/Jeremy/flex/R files/test_cellpop1.R')
source('C:/DFCI/Jeremy/flex/R files/test_cellpop1.R')
.05*10000
.05*10000 - 750*.05
(.05*10000 - 750*.05) / 750
source('C:/DFCI/Jeremy/flex/R files/test_cellpop1.R')
library(flex)
source('C:/DFCI/Jeremy/flex/R files/test_cellpop1.R')
source('C:/DFCI/Jeremy/flex/R files/test_cellpop1.R')
library(flex)
source('C:/DFCI/Jeremy/flex/R files/test_cellpop1.R')
source('C:/DFCI/Jeremy/flex/R files/test_cellpop1.R')
library(flex)
library(flex)
source('C:/DFCI/Jeremy/flex/R files/test_cellpop1.R')
source('C:/DFCI/Jeremy/flex/R files/test_cellpop1.R')
source('C:/DFCI/Jeremy/flex/R files/test_cellpop1.R')
source('C:/DFCI/Jeremy/flex/R files/test_cellpop1.R')
source('C:/DFCI/Jeremy/flex/R files/test_cellpop1.R')
source('C:/DFCI/Jeremy/flex/R files/test_cellpop2.R')
source('C:/DFCI/Jeremy/flex/R files/test_cellpop2.R')
source('C:/DFCI/Jeremy/flex/R files/test_cellpop2.R')
source('C:/DFCI/Jeremy/flex/R files/test_cellpop2.R')
source('C:/DFCI/Jeremy/flex/R files/test_cellpop2.R')
source('C:/DFCI/Jeremy/flex/R files/test_cellpop2.R')
source('C:/DFCI/Jeremy/flex/R files/test_cellpop2.R')
source('C:/DFCI/Jeremy/flex/R files/test_cellpop2.R')
source('C:/DFCI/Jeremy/flex/R files/test_cellpop2.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example1.R')
source('C:/DFCI/Jeremy/flex/R files/example3.R')
source('C:/DFCI/Jeremy/flex/R files/example3.R')
source('C:/DFCI/Jeremy/flex/R files/example3.R')
inDir = paste(getwd(), "/example/", sep = "")
setwd(inDir)
popfiles = list.files(inDir, pattern="^out.*.pop$", full.names=F)
lblfiles = list.files(inDir, pattern="^out.*.label$", full.names=F)
sdifiles = list.files(inDir, pattern="^out.*.sdi$", full.names=F)
a = read.table(popfiles[length(popfiles)], header = T)
b = read.table(lblfiles[length(lblfiles)], header = T)
d = read.table(sdifiles[length(sdifiles)], header = T)
par(mfrow=c(2,2))
for(i in 2:ncol(a)){
plot(a[,1], a[,i], main = colnames(a)[i], ylab = "Population size", xlab = "time")
plot(b[,1], b[,i], main = colnames(b)[i],ylim = c(0,1), xlab = "time",
ylab = "Fraction Labelled", col = "red")
# mutfiles = list.files(inDir, pattern=paste("^out.*", colnames(a)[i], ".mut$", sep = ""), full.names = F)
#c = read.table(mutfiles[length(mutfiles)], header = F, fill = TRUE, col.names = paste0("V", seq_len(max(count.fields(mutfiles[length(mutfiles)])))))
#c[is.na(c)] = 0
#matplot(c[,2:ncol(c)], main = colnames(a)[i])
plot(d[,1], d[,i], main = colnames(a)[i], ylab = "SDI", xlab = "time")
}
infofiles = list.files(inDir, pattern="^out.*.info$", full.names=F)
info = read.table(infofiles[length(infofiles)], header = T)
evtfiles = list.files(inDir, pattern = "^out.*.events$", full.names = F)
evt = read.table(evtfiles[length(evtfiles)], header = T)
#View(evt)
options(scipen = 999)
evt2 = evt
for(row in 2:nrow(evt)){
for(i in 2:length(names(a))){
popsize = a[row-1,i]
cp = names(a)[i]
#print(grepl( cp , names(evt) ))
evt2[row,grepl( cp , names(evt) )] = evt2[row,grepl( cp , names(evt) )] / popsize
}
}
print(apply(evt2[2:nrow(evt2),], 2, mean), )
.01*.0035
source('C:/DFCI/Jeremy/flex/R files/example3.R')
source('C:/DFCI/Jeremy/flex/R files/example3.R')
source('C:/DFCI/Jeremy/flex/R files/example3.R')
source('C:/DFCI/Jeremy/flex/R files/example3.R')
source('C:/DFCI/Jeremy/flex/R files/example3.R')
source('C:/DFCI/Jeremy/flex/R files/example3.R')
source('C:/DFCI/Jeremy/flex/R files/example3.R')
source('C:/DFCI/Jeremy/flex/R files/example3.R')
source('C:/DFCI/Jeremy/flex/R files/example3.R')
library(flex)
source('C:/DFCI/Jeremy/flex/R files/test_cellpop2.R')
source('C:/DFCI/Jeremy/flex/R files/example3.R')
library(flex)
source('C:/DFCI/Jeremy/flex/R files/example3.R')
myTree
myTree$rootInd
library(flex)
library(flex)
library(flex)
library(flex)
library(roxygen2)
roxygenise()
