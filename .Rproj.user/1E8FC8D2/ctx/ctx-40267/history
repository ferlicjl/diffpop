geom_line(aes(color = alpha)) +
facet_wrap(~pop, scales = "free_y") +
scale_x_continuous() +
ggtitle(p) #+
#theme(legend.position="none")
plot(g)
dat$alpha = factor(dat$alpha)
g = ggplot(data=dat, aes(x=time, y = count, group = run, color = alpha)) +
geom_line(aes(color = alpha)) +
facet_wrap(~pop, scales = "free_y") +
scale_x_continuous() +
ggtitle(p) #+
#theme(legend.position="none")
plot(g)
source('C:/DFCI/Jeremy/flex/R files/plotSize.R')
source('C:/DFCI/Jeremy/flex/R files/plotSize.R')
g = ggplot(data=dat, aes(x=time, y = count, group = run, color = alpha)) +
geom_line(aes(color = alpha)) +
facet_wrap(~pop, scales = "free_y") +
scale_x_continuous() +
ggtitle(p) +
stat_summary(fun.y=mean,geom="line",lwd=2,aes(group=as.factor(alpha)))
#theme(legend.position="none")
plot(g)
g = ggplot(data=dat, aes(x=time, y = count, group = run, color = alpha)) +
geom_line(aes(color = alpha), alpha = 1/10) +
facet_wrap(~pop, scales = "free_y") +
scale_x_continuous() +
ggtitle(p) +
stat_summary(fun.y=mean,geom="line",lwd=1.5,aes(group=as.factor(alpha), color = "black")) +
stat_summary(fun.y=mean,geom="line",lwd=1,aes(group=as.factor(alpha)))
#theme(legend.position="none")
plot(g)
g = ggplot(data=dat, aes(x=time, y = count, group = run, color = alpha)) +
geom_line(aes(color = alpha), alpha = 1/10) +
facet_wrap(~pop, scales = "free_y") +
scale_x_continuous() +
ggtitle(p) +
stat_summary(fun.y=mean,geom="line",lwd=1.5,aes(group=as.factor(alpha), colour = "black")) +
stat_summary(fun.y=mean,geom="line",lwd=1,aes(group=as.factor(alpha)))
#theme(legend.position="none")
plot(g)
g = ggplot(data=dat, aes(x=time, y = count, group = run, color = alpha)) +
geom_line(aes(color = alpha), alpha = 1/10) +
facet_wrap(~pop, scales = "free_y") +
scale_x_continuous() +
ggtitle(p) +
stat_summary(fun.y=mean,geom="line",lwd=1.5,aes(group=as.factor(alpha)), colour = "black") +
stat_summary(fun.y=mean,geom="line",lwd=1,aes(group=as.factor(alpha)))
#theme(legend.position="none")
plot(g)
source('C:/DFCI/Jeremy/flex/R files/diffpop/popsize_over_alpha.R')
source('C:/DFCI/Jeremy/flex/R files/diffpop/popsize_over_alpha.R')
source('C:/DFCI/Jeremy/flex/R files/diffpop/popsize_over_alpha.R')
source('C:/DFCI/Jeremy/flex/R files/diffpop/popsize_over_alpha.R')
ggtitle("Population Size") +
#guides(fill=guide_legend(title=expression(alpha[LT]))) +
stat_summary(fun.y=mean,geom="line",lwd=1.5,aes(group=as.factor(alpha)), colour = "black") +
stat_summary(fun.y=mean,geom="line",lwd=1,aes(group=as.factor(alpha)))
g = ggplot(data=dat, aes(x=time, y = count, group = run, color = alpha)) +
geom_line(aes(color = alpha), alpha = 1/10) +
facet_wrap(~pop, scales = "free_y") +
scale_x_continuous() +
xlab("time (days)") +
ylab("population size")
#ggtitle("Population Size") +
#guides(fill=guide_legend(title=expression(alpha[LT]))) +
stat_summary(fun.y=mean,geom="line",lwd=1.5,aes(group=as.factor(alpha)), colour = "black") +
stat_summary(fun.y=mean,geom="line",lwd=1,aes(group=as.factor(alpha)))
g = ggplot(data=dat, aes(x=time, y = count, group = run, color = alpha)) +
geom_line(aes(color = alpha), alpha = 1/10) +
facet_wrap(~pop, scales = "free_y") +
scale_x_continuous() +
xlab("time (days)") +
ylab("population size")+
#ggtitle("Population Size") +
#guides(fill=guide_legend(title=expression(alpha[LT]))) +
stat_summary(fun.y=mean,geom="line",lwd=1.5,aes(group=as.factor(alpha)), colour = "black") +
stat_summary(fun.y=mean,geom="line",lwd=1,aes(group=as.factor(alpha)))
#theme(legend.position="none")
plot(g)
g = ggplot(data=dat, aes(x=time, y = count, group = run, color = alpha)) +
geom_line(aes(color = alpha), alpha = 1/10) +
facet_wrap(~pop, scales = "free_y") +
scale_x_continuous() +
xlab("time (days)") +
ylab("population size")+
ggtitle("Population Size") +
guides(fill=guide_legend(title=expression(alpha[LT]))) +
stat_summary(fun.y=mean,geom="line",lwd=1.5,aes(group=as.factor(alpha)), colour = "black") +
stat_summary(fun.y=mean,geom="line",lwd=1,aes(group=as.factor(alpha)))
#theme(legend.position="none")
plot(g)
source('C:/DFCI/Jeremy/flex/R files/diffpop/popsize_over_alpha.R')
source('C:/DFCI/Jeremy/flex/R files/diffpop/popsize_over_alpha.R')
source('C:/DFCI/Jeremy/flex/R files/diffpop/popsize_over_alpha.R')
source('C:/DFCI/Jeremy/flex/R files/diffpop/popsize_over_gamma.R')
View(info)
info$gamma_LT
source('C:/DFCI/Jeremy/flex/R files/diffpop/popsize_over_gamma.R')
source('C:/DFCI/Jeremy/flex/R files/diffpop/popsize_over_gamma.R')
source('C:/DFCI/Jeremy/flex/R files/diffpop/popsize_over_gamma.R')
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
source('C:/DFCI/Jeremy/flex/R files/diffpop/popsize_over_gamma.R')
.042*2.9+.009
.045*2.9
4*9+2.9*.045
9*.022 + 9*3.992
3*13 + 9*.022
13*(2+1.015)
3*13 + 9*.022
13*(3.015)
(3*13 + 9*.022)/13
(3*13 + 9*.022)/13-2
?simulateTreeCodeNew
library(flex)
testcode()
source('C:/DFCI/Jeremy/flex/test/barPlotsCompressed.R')
setwd("C:/DFCI/Jeremy/flex/test/")
directory = "C:/DFCI/Jeremy/flex/test/"
prefixes = tools::file_path_sans_ext(grep("*.info", list.files(directory),value=TRUE))
library(ggplot2)
library(gridExtra)
library(grid)
setwd("C:/DFCI/Jeremy/Odyssey/test/")
directory = "C:/DFCI/Jeremy/Odyssey/test/"
pdf("C:/DFCI/Jeremy/Odyssey/test/mutBarPlots.pdf", paper = "USr")
readTraverseFile = function(fname){
tdat = read.delim(fname, header = F, sep = " ")
tdat = tdat[1:(nrow(tdat)-4),c(2, 4, 6, 8)]
names(tdat) = c("barcode", "mutation", "fitness", "count")
tdat$mutation[tdat$mutation == ""] = NA
return(tdat)
}
readCompressed = functiOn(fname){
tdat = read.table(f, header = T)
return(tdat)
}
prefixes = list.dirs(path = ".", full.names = F, recursive = F)
print(paste("Number of Prefixes:", length(prefixes)))
p = prefixes[1]
setwd(paste(getwd(), p, sep = ""))
getwd()
setwd(paste(getwd(),"/", p, sep = ""))
print(p)
overall_data = data.frame()
files = grep(paste("^", p, ".*.all.c", sep = ""), list.files(directory),value=TRUE)
plot_list = list()
pattern = "_\\D+_"
celltypes = gsub('_', '', unique(regmatches(files, regexpr(pattern, files))))
files
getwd()
p
files = grep(paste("^", p, ".*.all.c", sep = ""), list.files(getwd()),value=TRUE)
files
plot_list = list()
pattern = "_\\D+_"
celltypes = gsub('_', '', unique(regmatches(files, regexpr(pattern, files))))
celltypes
ct = "LT"
full_data = data.frame()
files.ct = grep(paste("_", ct, "_", sep = ""), files, value = T)
files.ct
f = files.ct[1]
pattern = "\\d+.all"
time = gsub('.all', '', unique(regmatches(f, regexpr(pattern, f))))
time
#print(paste("Time:", time, "File:", f))
tdat = readCompressed(f)
readCompressed = function(fname){
tdat = read.table(f, header = T)
return(tdat)
}
#print(paste("Time:", time, "File:", f))
tdat = readCompressed(f)
# tdat[tdat$mutation == ""] = NA
tdat$pop = ct
tdat$time = as.numeric(time)
tdat$group = paste(tdat$barcode, tdat$mutation, tdat$fitness, sep = "-")
View(tdat)
full_data = rbind(full_data, tdat)
full_data = full_data[order(full_data$time),]
for(f in files.ct){
pattern = "\\d+.all"
time = gsub('.all', '', unique(regmatches(f, regexpr(pattern, f))))
#print(paste("Time:", time, "File:", f))
tdat = readCompressed(f)
# tdat[tdat$mutation == ""] = NA
tdat$pop = ct
tdat$time = as.numeric(time)
tdat$group = paste(tdat$barcode, tdat$mutation, tdat$fitness, sep = "-")
full_data = rbind(full_data, tdat)
full_data = full_data[order(full_data$time),]
}
ls
dev.off()
dev.off()
dev.off()
source('C:/DFCI/Jeremy/Odyssey/read_raw_barplotDirectories.R')
View(overall_data)
source('C:/DFCI/Jeremy/Odyssey/read_raw_barplotDirectories.R')
source('C:/DFCI/Jeremy/Odyssey/read_raw_barplotDirectories.R')
dev.off()
dev.off()
source('C:/DFCI/Jeremy/Odyssey/read_raw_barplotDirectories.R')
source('C:/DFCI/Jeremy/Odyssey/read_raw_barplotDirectories.R')
source('C:/DFCI/Jeremy/Odyssey/read_raw_barplotDirectories.R')
dev.off()
dev.off()
source('C:/DFCI/Jeremy/Odyssey/read_raw_barplotDirectories.R')
library(flex)
source('C:/DFCI/Jeremy/flex/R files/newRatesTest.R')
source('C:/DFCI/Jeremy/flex/R files/newRatesTest.R')
source('C:/DFCI/Jeremy/flex/R files/newPops.R')
0.24*39
0.39*39
source('C:/DFCI/Jeremy/flex/R files/newPops.R')
source('C:/DFCI/Jeremy/flex/R files/newPops.R')
source('C:/DFCI/Jeremy/flex/R files/newPops.R')
library(flex)
library(flex)
source('~/.active-rstudio-document')
ret
hist(ret)
source('~/.active-rstudio-document')
hist(ret)
hist(ret)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(flex)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(flex)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
table(ret)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
table(ret)
table(ret)/n
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
table(ret)/n
library(flex)
setwd("C:/example4/")
wdir = getwd()
simulateTreeCodeNew(nObs =100, traverseFrequency = 1, indir = "C:/example4/tree_1_1/",
outdir = "C:/example4/output/")
getwd()
simulateTreeCodeNew(nObs =100, traverseFrequency = 1, indir = paste(getwd(), "/tree_1_1/", sep = ""),
outdir = "C:/example4/output/")
simulateTreeCodeNew(nObs =100, traverseFrequency = 1, indir = paste(getwd(), "/tree_1_1/", sep = ""),
outdir = paste(getwd(), "/output/", sep = ""))
simulateTreeCodeNew(nObs =100, traverseFrequency = 1, indir = paste(getwd(), "/tree_1_1/", sep = ""),
outdir = paste(getwd(), "/output/", sep = ""))
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
foreach(y_=1:length(treedirs), .packages = c("tictoc", "flex")) %dopar% {
##library(tictoc)
#library(flex)
tic()
simulateTreeCodeNew(nObs =100, traverseFrequency = 1, indir = paste(getwd(), "/tree_1_1/", sep = ""),
outdir = paste(getwd(), "/output/", sep = ""))
toc()
}
stopCluster(cl)
library(foreach)
library(doParallel)
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
foreach(y_=1:length(treedirs), .packages = c("tictoc", "flex")) %dopar% {
##library(tictoc)
#library(flex)
tic()
simulateTreeCodeNew(nObs =100, traverseFrequency = 1, indir = paste(getwd(), "/tree_1_1/", sep = ""),
outdir = paste(getwd(), "/output/", sep = ""))
toc()
}
stopCluster(cl)
library(foreach)
library(doParallel)
new = T
cores=detectCores()
ntrials = 1
mus = c(1e-7, 1e-8, 1e-9)
#sizes = array(dim = c(ntrials, length(gammas)))
print(paste("I'm working with", cores-1, "cores"))
#print(paste("Output Directory:", output_dir))
y = 0
treedirs = c()
for(j_ in seq(length(mus))){
for(i_ in 1:ntrials) {
library(tictoc)
library(flex)
setwd(wdir)
#unlink("example/*", recursive = T)
print(paste(i_, j_))
mu = mus[j_]
flex:::removeTree()
nLT = 17000
CellPopulation("LT", nLT, 0.0)
CellPopulation("ST", 2.9*nLT, 0.0)
CellPopulation("MPP", 9*nLT, 0.0)
CellPopulation("CLP", 13*nLT, 0.0)
CellPopulation("CMP", 39*nLT, 0.0)
CellPopulation("GMP", as.integer(0.24*39*nLT), 0.0)
CellPopulation("MEP", as.integer(0.39*39*nLT), 0.0)
CellPopulation("proB", as.integer(108*13*nLT), 0.0)
addEdge("LT", "LT", "alpha", 0.009)
addEdge("ST", "ST", "alpha", 0.042)
addEdge("MPP", "MPP", "alpha", 4)
addEdge("CLP", "CLP", "alpha", 3.00)
addEdge("CMP", "CMP", "alpha", 4)
addEdge("LT", "ST", "gamma1", 0.009)
addEdge("ST", "MPP", "gamma1", 0.045)
addEdge("MPP", "CLP", "gamma1", 0.022)
addEdge("MPP", "CMP", "gamma1", 3.992)
addEdge("CLP", "proB", "gamma1", 2.000)
addEdge("CMP", "GMP", "gamma1", 2)
addEdge("CMP", "MEP", "gamma1", 3)
addEdge("CLP", "CLP", "delta", 1.015)
addEdge("GMP", "GMP", "delta", 2*39/(0.24*39))
addEdge("MEP", "MEP", "delta", 3*39/(0.39*39))
addEdge("proB", "proB", "delta", 2*13/(108*13))
addEdge("LT", "LT", "mutation", mu)
addEdge("ST", "ST", "mutation", mu)
addEdge("MPP", "MPP", "mutation", mu)
addEdge("CLP", "CLP", "mutation", mu)
addEdge("CMP", "CMP", "mutation", mu)
addEdge("MEP", "MEP", "mutation", mu)
addEdge("GMP", "GMP", "mutation", mu)
addEdge("proB", "proB", "mutation", mu)
setRoot("LT")
tree_dir = paste("/tree_", i_, "_", j_, "/",sep = "")
writeTree(outdir = tree_dir)
treedirs = c(treedirs, tree_dir)
#par(mfrow=c(1,1))
#plotTree(allEdge = T)
flex:::removeTree()
}
}
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
foreach(y_=1:length(treedirs), .packages = c("tictoc", "flex")) %dopar% {
##library(tictoc)
#library(flex)
tic()
simulateTreeCodeNew(nObs =100, traverseFrequency = 1, indir = paste(getwd(), "/tree_1_1/", sep = ""),
outdir = paste(getwd(), "/output/", sep = ""))
toc()
}
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
foreach(y_=1:length(treedirs), .packages = c("tictoc", "flex")) %dopar% {
##library(tictoc)
#library(flex)
tic()
simulateTreeCodeNew(nObs =100, traverseFrequency = 1, indir = paste(getwd(), "/tree_1_1/", sep = ""),
outdir = paste(getwd(), "/output/", sep = ""))
toc()
}
stopCluster(cl)
library(flex)
library(flex)
library(flex)
setwd("C:/example4/")
wdir = getwd()
output_dir = paste(wdir, "/output/", sep = "")
dir.create(wdir, showWarnings = FALSE)
dir.create(output_dir, showWarnings = FALSE)
library(foreach)
library(doParallel)
new = T
cores=detectCores()
ntrials = 1
mus = c(1e-7, 1e-8, 1e-9)
print(paste("I'm working with", cores-1, "cores"))
y = 0
treedirs = c()
for(j_ in seq(length(mus))){
for(i_ in 1:ntrials) {
library(tictoc)
library(flex)
setwd(wdir)
#unlink("example/*", recursive = T)
print(paste(i_, j_))
mu = mus[j_]
flex:::removeTree()
nLT = 17000
CellPopulation("LT", nLT, 0.0)
CellPopulation("ST", 2.9*nLT, 0.0)
CellPopulation("MPP", 9*nLT, 0.0)
CellPopulation("CLP", 13*nLT, 0.0)
CellPopulation("CMP", 39*nLT, 0.0)
CellPopulation("GMP", as.integer(0.24*39*nLT), 0.0)
CellPopulation("MEP", as.integer(0.39*39*nLT), 0.0)
CellPopulation("proB", as.integer(108*13*nLT), 0.0)
addEdge("LT", "LT", "alpha", 0.009)
addEdge("ST", "ST", "alpha", 0.042)
addEdge("MPP", "MPP", "alpha", 4)
addEdge("CLP", "CLP", "alpha", 3.00)
addEdge("CMP", "CMP", "alpha", 4)
addEdge("LT", "ST", "gamma1", 0.009)
addEdge("ST", "MPP", "gamma1", 0.045)
addEdge("MPP", "CLP", "gamma1", 0.022)
addEdge("MPP", "CMP", "gamma1", 3.992)
addEdge("CLP", "proB", "gamma1", 2.000)
addEdge("CMP", "GMP", "gamma1", 2)
addEdge("CMP", "MEP", "gamma1", 3)
addEdge("CLP", "CLP", "delta", 1.015)
addEdge("GMP", "GMP", "delta", 2*39/(0.24*39))
addEdge("MEP", "MEP", "delta", 3*39/(0.39*39))
addEdge("proB", "proB", "delta", 2*13/(108*13))
addEdge("LT", "LT", "mutation", mu)
addEdge("ST", "ST", "mutation", mu)
addEdge("MPP", "MPP", "mutation", mu)
addEdge("CLP", "CLP", "mutation", mu)
addEdge("CMP", "CMP", "mutation", mu)
addEdge("MEP", "MEP", "mutation", mu)
addEdge("GMP", "GMP", "mutation", mu)
addEdge("proB", "proB", "mutation", mu)
setRoot("LT")
tree_dir = paste("/tree_", i_, "_", j_, "/",sep = "")
writeTree(outdir = tree_dir)
treedirs = c(treedirs, tree_dir)
#par(mfrow=c(1,1))
#plotTree(allEdge = T)
flex:::removeTree()
}
}
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
foreach(y_=1:length(treedirs), .packages = c("tictoc", "flex")) %dopar% {
##library(tictoc)
#library(flex)
tic()
simulateTreeCodeNew(nObs =100, traverseFrequency = 1, indir = paste(getwd(), treedirs[y_], sep = ""),
outdir = paste(getwd(), "/output/", sep = ""))
toc()
}
floor(3/2)
floor(63/3)
library(kntir)
install.packages("knitr")
install.packages("knitr")
install.packages("kableExtra")
library(flex)
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
library(flex)
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
library(flex)
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
source('C:/DFCI/Jeremy/flex/R files/example3Fixed.R')
library(flex)
