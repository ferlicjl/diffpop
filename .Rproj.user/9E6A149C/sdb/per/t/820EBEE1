{
    "collab_server" : "",
    "contents" : "#include \"FixedPopCell.h\"\n//#include \"CellType.h\"\n#include <iostream>\n#include <iomanip>\n#include <stdlib.h>     /* srand, rand */\n#include <time.h>       /* time */\n#include <numeric>\n#include <algorithm>\n#include <assert.h>     /* assert */\n#include <map>\n#include <math.h>\n\n#include <RcppGSL.h>\n#include <Rcpp.h>\n#include <Rinternals.h>\n\n// All Constructors simply call CellType constructors\nFixedPopCell::FixedPopCell() : CellPopulation() {\n}\n\nFixedPopCell::FixedPopCell(std::string cname) : CellPopulation(cname){\n\n}\n\nFixedPopCell::FixedPopCell(std::string cname, long int ncells) : CellPopulation(cname, ncells){\n}\n\nFixedPopCell::FixedPopCell(std::string cname, long int ncells, long int offset) : CellPopulation(cname, ncells, offset){\n\n}\n\nFixedPopCell::FixedPopCell(std::string cname, long int ncells, long int offset, double eff) : CellPopulation(cname, ncells, offset, eff){\n\n}\n\n// Destructor - no dynamic memory\nFixedPopCell::~FixedPopCell(){\n}\n\n\n\n// Enacts the events that would occur in one-unit of time according to rates determined by the cell type\n// Importantly, events are ordered such that cell population size remains constant\nvoid FixedPopCell::time_step(bool verbose){\n\t// Create vector of 3 probabilities:\n\t// 1. split(s), 2. die, 3. differentiate\n\tdouble div_rates = alpha + std::accumulate(asym_rates.begin(), asym_rates.end(), 0.0) + std::accumulate(diff_rates.begin(), diff_rates.end(), 0.0);\n\n\t// Select number of events from these rates\n\tint n_init_events = codes.size() * div_rates;\n\tif(verbose)\n\t\tstd::cout << n_init_events << std::endl;\n\n\t// Set up a vector to be able to choose an event type\n\tstd::vector<double> init_rates;\n\tinit_rates.push_back(alpha);\n\tinit_rates.push_back(std::accumulate(asym_rates.begin(), asym_rates.end(), 0.0));\n\tinit_rates.push_back(std::accumulate(diff_rates.begin(), diff_rates.end(), 0.0));\n\n\tstd::vector<double> up_rates;\n\tup_rates.push_back(alpha);\n\n\tstd::vector<double> down_rates;\n\tdown_rates.push_back(death);\n\tdown_rates.push_back(std::accumulate(diff_rates.begin(), diff_rates.end(), 0.0));\n\n\t// Set up simple string to print out event type name\n\tstd::vector<std::string> init_names;\n\tinit_names.push_back(\"Mitosis\");\n\tinit_names.push_back(\"Asym. Differentiation\");\n\tinit_names.push_back(\"Differentiation\");\n\n\tstd::vector<std::string> down_names;\n\t\tdown_names.push_back(\"Apoptosis\");\n\tfor(int j = 0; j < numChildren; j++){\n\t\tdown_names.push_back(children[j]->name);\n\t}\n\n\t// Iterate over the number of events\n\tfor(int i = upstreamEvents; i < n_init_events; i++){\n\t\tif(verbose)\n\t\t\tstd::cout << \"Step \" << (i+1) << \": \";\n\t\tint choice = choose(init_rates);\n\t\tif(verbose)\n\t\t\tstd::cout << init_names[choice] << ' ';\n\n\t\t// Gained a cell, need to remove by initiating a down event\n\t\tif(choice == 0){\n\t\t\tmitosis();\n\t\t\tint choice2 = choose(down_rates);\n\t\t\t// Cell death, or a differentiation event\n\t\t\tif(choice2 == 0){\n\t\t\t\tapoptosis();\n\t\t\t}\n\t\t\telse{\n\t\t\t\tdifferentiation();\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\t//Asym. Diff doesn't change cell population size\n\t\telse if(choice == 1){\n\t\t\tasym_diff();\n\t\t}\n\t\t// Differentiation causes us to need a mitosis event\n\t\telse {\n\t\t\tdifferentiation();\n\n\t\t\tint choice2 = choose(up_rates);\n\t\t\tif(choice2 == 0){\n\t\t\t\tmitosis();\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tstd::cout << \"I'm broken...\" << std::endl;\n\t\t\t}\n\t\t}\n\t}\n\tif(verbose)\n\t\tstd::cout << std::endl;\n}\n\n// Enacts the events that would occur in one-unit of time according to rates determined by the cell type\n// Importantly, events are ordered such that cell population size remains constant\nvoid FixedPopCell::single_event(bool verbose){\n\t// Create vector of 3 probabilities:\n\t// 1. split(s), 2. die, 3. differentiate\n\tdouble div_rates = alpha + std::accumulate(asym_rates.begin(), asym_rates.end(), 0.0) + std::accumulate(diff_rates.begin(), diff_rates.end(), 0.0);\n\n\t// Select number of events from these rates\n\tint n_events = codes.size() * div_rates;\n\tn_events = 1;\n\tif(verbose)\n\t\tstd::cout << n_events << std::endl;\n\n\t// Set up a vector to be able to choose an event type\n\tstd::vector<double> init_rates;\n\tinit_rates.push_back(alpha);\n\tinit_rates.push_back(std::accumulate(asym_rates.begin(), asym_rates.end(), 0.0));\n\n\tstd::vector<double> down_rates;\n\tdown_rates.push_back(death);\n\tdown_rates.push_back(std::accumulate(diff_rates.begin(), diff_rates.end(), 0.0));\n\n\t// Set up simple string to print out event type name\n\tstd::vector<std::string> init_names;\n\tinit_names.push_back(\"Mitosis\");\n\tinit_names.push_back(\"Asym. Differentiation\");\n\n\tstd::vector<std::string> down_names;\n\t\tdown_names.push_back(\"Apoptosis\");\n\tfor(int j = 0; j < numChildren; j++){\n\t\tdown_names.push_back(children[j]->name);\n\t}\n\n\t// Iterate over the number of events\n\tfor(int i = 0; i < n_events; i++){\n\t\tif(verbose)\n\t\t\tstd::cout << \"Step \" << (i+1) << \": \";\n\t\tint choice = choose(init_rates);\n\t\tif(verbose)\n\t\t\tstd::cout << init_names[choice] << ' ';\n\n\t\t// Gained a cell, need to remove by initiating a down event\n\t\tif(choice == 0){\n\t\t\tmitosis();\n\t\t\tint choice2 = choose(down_rates);\n\t\t\t// Cell death, or a differentiation event\n\t\t\tif(choice2 == 0)\n\t\t\t\tapoptosis();\n\t\t\telse{\n\t\t\t\tdifferentiation();\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\t// Asym. Diff doesn't change cell population size\n\t\telse\n\t\t\tasym_diff();\n\t}\n\tif(verbose)\n\t\tstd::cout << std::endl;\n}\n\n// Amend adding a cell to this population since any increase in cell population must be met with a decrease\nvoid FixedPopCell::add_cell(bool code){\n\taddcellEvents += 1;\n\t// Events leading in a decrease of cell popluation\n\t// Rates:\n\tstd::vector<double> down_rates;\n\tdown_rates.push_back(death);\n\tdown_rates.push_back(std::accumulate(diff_rates.begin(), diff_rates.end(), 0.0));\n\n\t// Event names:\n\tstd::vector<std::string> down_names;\n\t\tdown_names.push_back(\"Apoptosis\");\n\tfor(int j = 0; j < numChildren; j++){\n\t\tdown_names.push_back(children[j]->name);\n\t}\n\n\t// Choose a down event\n\tint choice2 = choose(down_rates);\n\t// Cell death, or a differentiation event\n\tif(choice2 == 0){\n\t\tapoptosis();\n\t}\n\telse{\n\t\tdifferentiation();\n\t\tupstreamEvents += 1;\n\t}\n\n\t// Add new cell to population finally\n\tcodes.push_back(code);\n}\n\ndouble FixedPopCell::getSumRates(){\n\treturn (alpha + std::accumulate(asym_rates.begin(), asym_rates.end(), 0.0) + std::accumulate(diff_rates.begin(), diff_rates.end(), 0.0) + death) * codes.size();\n}\n",
    "created" : 1508268202754.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "33508271",
    "id" : "820EBEE1",
    "lastKnownWriteTime" : 1507061830,
    "last_content_update" : 1507061830,
    "path" : "~/Documents/Jeremy/flex/flex/src/FixedPopCell.cpp",
    "project_path" : "src/FixedPopCell.cpp",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "cpp"
}