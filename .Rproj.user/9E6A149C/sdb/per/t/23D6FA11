{
    "collab_server" : "",
    "contents" : "// Generated by using Rcpp::compileAttributes() -> do not edit by hand\n// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393\n\n#include <RcppGSL.h>\n#include <Rcpp.h>\n\nusing namespace Rcpp;\n\n// simflex\nint simflex();\nRcppExport SEXP _flex_simflex() {\nBEGIN_RCPP\n    Rcpp::RObject rcpp_result_gen;\n    Rcpp::RNGScope rcpp_rngScope_gen;\n    rcpp_result_gen = Rcpp::wrap(simflex());\n    return rcpp_result_gen;\nEND_RCPP\n}\n// simulateFixedTree\nint simulateFixedTree(int nObs, std::string indir, std::string outdir);\nRcppExport SEXP _flex_simulateFixedTree(SEXP nObsSEXP, SEXP indirSEXP, SEXP outdirSEXP) {\nBEGIN_RCPP\n    Rcpp::RObject rcpp_result_gen;\n    Rcpp::RNGScope rcpp_rngScope_gen;\n    Rcpp::traits::input_parameter< int >::type nObs(nObsSEXP);\n    Rcpp::traits::input_parameter< std::string >::type indir(indirSEXP);\n    Rcpp::traits::input_parameter< std::string >::type outdir(outdirSEXP);\n    rcpp_result_gen = Rcpp::wrap(simulateFixedTree(nObs, indir, outdir));\n    return rcpp_result_gen;\nEND_RCPP\n}\n// simulateTree\nint simulateTree(int nObs, std::string indir, std::string outdir);\nRcppExport SEXP _flex_simulateTree(SEXP nObsSEXP, SEXP indirSEXP, SEXP outdirSEXP) {\nBEGIN_RCPP\n    Rcpp::RObject rcpp_result_gen;\n    Rcpp::RNGScope rcpp_rngScope_gen;\n    Rcpp::traits::input_parameter< int >::type nObs(nObsSEXP);\n    Rcpp::traits::input_parameter< std::string >::type indir(indirSEXP);\n    Rcpp::traits::input_parameter< std::string >::type outdir(outdirSEXP);\n    rcpp_result_gen = Rcpp::wrap(simulateTree(nObs, indir, outdir));\n    return rcpp_result_gen;\nEND_RCPP\n}\n// simulateFixedTreeCode\nint simulateFixedTreeCode(int nObs, std::string indir, std::string outdir);\nRcppExport SEXP _flex_simulateFixedTreeCode(SEXP nObsSEXP, SEXP indirSEXP, SEXP outdirSEXP) {\nBEGIN_RCPP\n    Rcpp::RObject rcpp_result_gen;\n    Rcpp::RNGScope rcpp_rngScope_gen;\n    Rcpp::traits::input_parameter< int >::type nObs(nObsSEXP);\n    Rcpp::traits::input_parameter< std::string >::type indir(indirSEXP);\n    Rcpp::traits::input_parameter< std::string >::type outdir(outdirSEXP);\n    rcpp_result_gen = Rcpp::wrap(simulateFixedTreeCode(nObs, indir, outdir));\n    return rcpp_result_gen;\nEND_RCPP\n}\n// simulateTreeCode\nint simulateTreeCode(int nObs, std::string indir, std::string outdir);\nRcppExport SEXP _flex_simulateTreeCode(SEXP nObsSEXP, SEXP indirSEXP, SEXP outdirSEXP) {\nBEGIN_RCPP\n    Rcpp::RObject rcpp_result_gen;\n    Rcpp::RNGScope rcpp_rngScope_gen;\n    Rcpp::traits::input_parameter< int >::type nObs(nObsSEXP);\n    Rcpp::traits::input_parameter< std::string >::type indir(indirSEXP);\n    Rcpp::traits::input_parameter< std::string >::type outdir(outdirSEXP);\n    rcpp_result_gen = Rcpp::wrap(simulateTreeCode(nObs, indir, outdir));\n    return rcpp_result_gen;\nEND_RCPP\n}\n\nstatic const R_CallMethodDef CallEntries[] = {\n    {\"_flex_simflex\", (DL_FUNC) &_flex_simflex, 0},\n    {\"_flex_simulateFixedTree\", (DL_FUNC) &_flex_simulateFixedTree, 3},\n    {\"_flex_simulateTree\", (DL_FUNC) &_flex_simulateTree, 3},\n    {\"_flex_simulateFixedTreeCode\", (DL_FUNC) &_flex_simulateFixedTreeCode, 3},\n    {\"_flex_simulateTreeCode\", (DL_FUNC) &_flex_simulateTreeCode, 3},\n    {NULL, NULL, 0}\n};\n\nRcppExport void R_init_flex(DllInfo *dll) {\n    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);\n    R_useDynamicSymbols(dll, FALSE);\n}\n",
    "created" : 1508259221261.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1203775549",
    "id" : "23D6FA11",
    "lastKnownWriteTime" : 1508259236,
    "last_content_update" : 1508259236,
    "path" : "~/Documents/Jeremy/flex/flex/src/RcppExports.cpp",
    "project_path" : "src/RcppExports.cpp",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "cpp"
}