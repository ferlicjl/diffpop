{
    "collab_server" : "",
    "contents" : "library(igraph)\n\n#' @export\nFixedPopCell = function(name, size, label = 0){\n  # If a tree doesn't exist, create one\n  if(!exists(\"myTree\")){\n    myTree <<- graph.empty(n = 0, directed = T)\n  }\n\n  # If the tree already contains the population, alert the user, else: add it\n  if(name %in% V(myTree)$popName){\n    print(paste(\"Population\", name, \"already exists.  Please use unique population names.\"))\n  } else {\n    myTree <<- myTree +  vertex(name, type = \"FixedPopCell\", popName = name, root = FALSE, popsize = size, lbl = label)\n  }\n}\n\n#' @export\nCellPopulation = function(name, size, label = 0.0){\n  # If a tree doesn't exist, create one\n  if(!exists(\"myTree\")){\n    myTree <<- graph.empty(n = 0, directed = T)\n  }\n\n  # If the tree already contains the population, alert the user, else: add it\n  if(name %in% V(myTree)$popName){\n    print(paste(\"Population\", name, \"already exists.  Please use unique population names.\"))\n  } else {\n    myTree <<- myTree +  vertex(name, type = \"CellPopulation\", popName = name, root = FALSE, popsize = size, lbl = label)\n  }\n}\n\n#' @export\nDiffTriangle = function(name, height, first_level = 1, label = 0){\n  # If a tree doesn't exist, create one\n  if(!exists(\"myTree\")){\n    myTree <<- graph.empty(n = 0, directed = T)\n  }\n\n  # If the tree already contains the population, alert the user, else: add it\n  if(name %in% V(myTree)$popName){\n    print(paste(\"Population\", name, \"already exists.  Please use unique population names.\"))\n  } else {\n    myTree <<- myTree +  vertex(name, type = \"DiffTriangle\", height = height, firstlevel = first_level, popName = name, root = FALSE, lbl = label)\n  }\n}\n\n\n#' @export\nDiffTree = function(name){\n  # If a tree doesn't exist, create one\n  if(!exists(\"myTree\")){\n    myTree <<- graph.empty(n = 0, directed = T)\n  }\n\n  # If the tree already contains the population, alert the user, else: add it\n  if(name %in% V(myTree)$popName){\n    print(paste(\"Population\", name, \"already exists.  Please use unique population names.\"))\n  } else {\n    myTree <<- myTree +  vertex(name, type = \"DiffTree\", popName = name, root = FALSE)\n  }\n}\n\n#' @export\nsetRoot = function(popName){\n  # If a tree doesn't exist, create one\n  if(!exists(\"myTree\")){\n    print(\"Tree does not exist. Create at least one population before setting root.\")\n  }else {\n\n    # If the population exists in the tree, set its Root attribute to True, else: alert user\n    if(popName %in% V(myTree)$popName){\n      for(v in V(myTree)){\n        if (V(myTree)[v]$popName == popName){\n          myTree <<- set.vertex.attribute(graph = myTree, name = \"root\", index = v,value = TRUE)\n          myTree <<- set.graph.attribute(graph = myTree, name = \"rootInd\", value = v)\n        }\n      }\n    } else {\n      print(paste(\"Population\", popName, \"does not exist.  Please create it before setting root.\"))\n    }\n  }\n}\n\n#' @export\naddEdge = function(parent, child, type, rate){\n  c = checkEdge(parent, child, type) > 0\n  if(c == 0){\n    myTree <<- myTree + edge(parent, child, weight = rate, type = type)\n  } else if (c == 1){\n    print(\"Edge already exists. Please use 'editEdit' to change its rate\")\n  }\n}\n\n# Returns -1 if populations don't exist\n# returns 0 if edge does not exist\n# returns 1 if edge exists\ncheckEdge = function(parent, child, type){\n  if(checkPopulation(parent) & checkPopulation(child)){\n    el = getEdges()\n    edges = el[el$parent == parent & el$child == child & el$type == type,]\n    #print(edges)\n    return(nrow(edges) == 1)\n  }\n  return(-1)\n}\n\n#' @export\neditEdge = function(parent, child, type, rate){\n  c = checkEdge(parent, child, type)\n  if (c == 0){\n    print(\"Edge does not already exist.  Add it using 'addEdge'.\")\n  } else if(c == 1){\n    for(e in E(myTree)){\n      if(ends(myTree, e)[1] == parent & ends(myTree, e)[2] == child & E(myTree)[e]$type == type){\n        myTree <<- set_edge_attr(myTree, \"weight\", e, rate)\n      }\n    }\n  }\n}\n\ngetEdges = function(){\n  if(checkTree()){\n    g = myTree\n    edge_list = data.frame()\n    for (e in E(myTree)){\n      edge_list = rbind(edge_list, cbind(ends(g,e), E(g)[e]$type, E(g)[e]$weight))\n    }\n    if(nrow(edge_list) > 0)\n      colnames(edge_list) = c(\"parent\", \"child\", \"type\", \"rate\")\n    return(edge_list)\n  }\n}\n\ncheckTree = function(){\n  if(!exists(\"myTree\")){\n    print(\"Tree does not exist.  Please create at least one cell population.\")\n    return(FALSE)\n  }\n  return(TRUE)\n}\n\ncheckPopulation = function(popName){\n  if(checkTree()){\n    if(popName %in% V(myTree)$popName){\n      return(TRUE)\n    }\n  }\n  print(paste(\"The population\", popName, \"does not exist.  Please create it first.\"))\n  return(FALSE)\n}\n\ncheckRoot = function(){\n  if(checkTree()){\n    if(!is.null(get.graph.attribute(graph = myTree, \"rootInd\"))){\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n\n#' @export\nplotTree = function(allEdge = F){\n  if(!allEdge){\n    g.plot = delete.edges(myTree, which(E(myTree)$type != \"gamma\"))\n  } else {\n    g.plot = myTree\n  }\n  if(checkRoot()){\n    rootInd = get.graph.attribute(graph = myTree, \"rootInd\")\n    plot(g.plot, layout=layout_as_tree(g.plot, root = c(rootInd)))\n  } else {\n    plot(g.plot)\n  }\n}\n\n#' @export\nwriteTree = function(outdir = \"/graph_files/\"){\n  g = myTree\n  cdir = getwd()\n  outdir = paste(getwd(), outdir, sep = \"\")\n  dir.create(outdir, showWarnings = F)\n  setwd(outdir)\n  write.graph(g, \"g.txt\", format = \"ncol\")\n  write.table(cbind(V(g)$name, V(g)$type, V(g)$root), \"nodes.txt\", quote = F, row.names = F, col.names = F)\n  write.table(cbind(V(g)$name), \"names.txt\", quote = F, row.names = F, col.names = F)\n  write.table(cbind(V(g)$type), \"types.txt\", quote = F, row.names = F, col.names = F)\n  write.table(cbind(V(g)$root), \"roots.txt\", quote = F, row.names = F, col.names = F)\n  write.table(cbind(V(g)$popsize), \"sizes.txt\", quote = F, row.names = F, col.names = F)\n  write.table(cbind(V(g)$lbl), \"labels.txt\", quote = F, row.names = F, col.names = F)\n  write.table(cbind(V(g)$height), \"height.txt\", quote = F, row.names = F, col.names = F)\n  write.table(cbind(V(g)$firstlevel), \"firstlevels.txt\", quote = F, row.names = F, col.names = F)\n\n  edge_list = data.frame()\n  for (e in E(g)){\n    #print(typeof(e))\n    #print(ends(g, e))\n    #print(E(g)[e]$type)\n    edge_list = rbind(edge_list, cbind(ends(g,e), E(g)[e]$type, E(g)[e]$weight))\n  }\n\n  write.table(edge_list, \"edges.txt\", row.names = F, col.names = F, quote = F)\n\n  write.table(edge_list[,1], \"parent.txt\", row.names = F, col.names = F, quote = F)\n  write.table(edge_list[,2], \"child.txt\", row.names = F, col.names = F, quote = F)\n  write.table(edge_list[,3], \"diff.txt\", row.names = F, col.names = F, quote = F)\n  write.table(edge_list[,4], \"rates.txt\", row.names = F, col.names = F, quote = F)\n  setwd(cdir)\n}\n\n#' @export\ngenerateExample = function(n_LT = 100){\n  removeTree()\n\n  FixedPopCell(\"LT\", as.integer(n_LT), .11)\n  FixedPopCell(\"ST\", as.integer(2.9*n_LT), .65)\n  FixedPopCell(\"MPP\", as.integer(9*n_LT), .88)\n  FixedPopCell(\"CLP\", as.integer(13*n_LT), .88)\n  FixedPopCell(\"CMP\", as.integer(39*n_LT), 0.88)\n\n  addEdge(\"LT\", \"ST\", \"gamma\", 0.009)\n  addEdge(\"ST\", \"MPP\", \"gamma\", 0.045)\n  addEdge(\"MPP\", \"CLP\", \"gamma\", 0.022)\n  addEdge(\"MPP\", \"CMP\", \"gamma\", 3.992)\n  addEdge(\"LT\", \"LT\", \"alpha\", 0.009)\n  addEdge(\"ST\", \"ST\", \"alpha\", 0.042)\n  addEdge(\"MPP\", \"MPP\", \"alpha\", 4.000)\n  addEdge(\"CLP\", \"CLP\", \"alpha\", 3.980)\n\n  setRoot(\"LT\")\n  #plotTree()\n  #writeTree()\n}\n\nremoveTree = function(){\n  #print(exists(\"myTree\"))\n  if(exists(\"myTree\"))\n  {\n    objs <- ls(pos = \".GlobalEnv\")\n    rm(list = objs[grep(\"myTree\", objs)], pos = \".GlobalEnv\")\n  }\n}\n\n",
    "created" : 1507134650786.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "3|47|15|0|\n18|51|30|0|\n33|66|45|0|\n49|26|61|0|\n64|28|82|0|\n85|46|92|0|\n97|42|105|0|\n108|47|119|0|\n121|22|132|0|\n134|23|140|0|\n142|36|150|0|\n152|23|159|0|\n162|33|174|0|\n177|47|208|0|\n211|39|232|0|\n234|24|241|0|\n",
    "hash" : "1649836407",
    "id" : "B2293CFC",
    "lastKnownWriteTime" : 1507308906,
    "last_content_update" : 1507308924665,
    "path" : "~/Documents/Jeremy/flex/flex/R/functions.R",
    "project_path" : "R/functions.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}